#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const child_process = require('child_process');
const targetPath = path.join(
  __dirname,
  '../src/constant/default-chain-data.ts',
);

const res = child_process.execSync(
  'curl -s https://static.debank.com/supported_chains.json',
);
let supported_chains_list = [];
try {
  supported_chains_list = JSON.parse(res);
} catch (err) {
  console.error('parse remote chain data failed:', err);
}
const supported_chains_by_server_id = supported_chains_list.reduce(
  (acc, item) => {
    acc[item.id] = item;
    return acc;
  },
  {},
);

// const FE_COMMON_REPO = process.env.FE_COMMON_REPO || path.join(process.env.USERPROFILE || process.env.HOME, './projects/DeBankDeFi/fe-common');

// if (!fs.existsSync(FE_COMMON_REPO)) {
//   console.info(`FE_COMMON_REPO not found: ${FE_COMMON_REPO}`);
//   process.exit(1);
// }

// console.info(`found FE_COMMON_REPO: ${FE_COMMON_REPO}`);

// const currentPos = process.cwd();
// process.chdir(FE_COMMON_REPO);
// try {
//   console.log();
//   console.log('git pull...');
//   child_process.execSync('git pull');
//   console.log('git pull success');
// } catch (err) {
//   console.error('git pull failed:', err);
// } finally {
//   console.log();
//   process.chdir(currentPos);
// }

// const chainDataPath = path.join(FE_COMMON_REPO, 'src/chain-data.ts');

// if (!fs.existsSync(chainDataPath)) {
//   console.info(`chain-data.ts not found: ${chainDataPath}`);
//   process.exit(1);
// }

// console.info(`found chain-data.ts: ${chainDataPath}`);

// const chainDataContent = fs.readFileSync(chainDataPath, 'utf-8');

// get remote chain data from https://api.rabby.io/v1/wallet/supported_chains

// const CHUNKS = {
//   start: `export const CHAINS_RAW: Record<CHAINS_ENUM, ChainRaw>`,
//   end: `export const CHAINS_RAW_LIST`,
// };

// const fileLines = chainDataContent.replace(/\r\n/g, '\n')
//   .split('\n');

// const LINE = {
//   start: fileLines.findIndex((line) => line.includes(CHUNKS.start)) + 1,
//   end: fileLines.findIndex((line) => line.includes(CHUNKS.end)),
// };

// fileLines[LINE.start - 1] = fileLines[LINE.start - 1].replace(CHUNKS.start, 'const CHAINS_RAW: Record<CHAINS_ENUM, ChainRaw>');

// const newFileContent = fileLines.slice(
//   LINE.start - 1,
//   LINE.end - 1,
// ).join('\n');

// `
// ${newFileContent}

// export const DEFAULT_CHAIN_LIST: Chain[] = Object.values(CHAINS_RAW).map(item => {
//   const remoteItem = SupportedChainsByServerId[item.serverId];
//   if (!remoteItem) {
//     return {
//       ...item,
//       logo: item.nativeTokenLogo,
//       whiteLogo: item.nativeTokenLogo,
//     } as Chain;
//   }

//   return {
//     ...item,
//     logo: remoteItem.logo_url,
//     whiteLogo: remoteItem.white_logo_url,
//   } as Chain;
// });
// `

const formattedLines = `\
/***************** !! This file is generated by scripts/sync-default-chain-data.js automatically !!! *****************/

import { supportedChainToChain } from '@/isomorphic/chain';
import type { Chain } from '@debank/common';
import { ChainRaw, CHAINS_RAW_LIST } from '@debank/common/dist/chain-data';
import { SupportedChain } from '@rabby-wallet/rabby-api/dist/types';
import { keyBy } from 'lodash';

const SupportedChainsByServerId: Record<SupportedChain['id'], SupportedChain> = ${JSON.stringify(
  supported_chains_by_server_id,
  null,
  2,
)};

const chainByServerId = keyBy(CHAINS_RAW_LIST, 'serverId')
export const DEFAULT_CHAIN_LIST: Chain[] = Object.values(SupportedChainsByServerId).map(item => supportedChainToChain(item, chainByServerId));
`;

fs.writeFileSync(targetPath, formattedLines);

console.info('finished.');
