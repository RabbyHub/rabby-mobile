diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
index 07f73fd..7a410d7 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
@@ -7,6 +7,8 @@ import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Message;
+import android.os.Handler;
+import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
@@ -17,8 +19,12 @@ import android.webkit.ValueCallback;
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
+import android.webkit.JsResult;
+import android.webkit.JsPromptResult;
 import android.widget.FrameLayout;
+import android.widget.Button;
 
+import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import androidx.core.content.ContextCompat;
 
@@ -28,6 +34,7 @@ import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.common.build.ReactBuildConfig;
 import com.facebook.react.modules.core.PermissionAwareActivity;
 import com.facebook.react.modules.core.PermissionListener;
+import com.facebook.react.uimanager.ThemedReactContext;
 import com.facebook.react.uimanager.UIManagerHelper;
 import com.reactnativecommunity.webview.events.TopLoadingProgressEvent;
 import com.reactnativecommunity.webview.events.TopOpenWindowEvent;
@@ -36,6 +43,24 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+import android.view.inputmethod.BaseInputConnection;
+import android.view.inputmethod.EditorInfo;
+import android.view.inputmethod.InputConnection;
+
+
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.widget.Toast;
+
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatActivity;
+
 public class RNCWebChromeClient extends WebChromeClient implements LifecycleEventListener {
     protected static final FrameLayout.LayoutParams FULLSCREEN_LAYOUT_PARAMS = new FrameLayout.LayoutParams(
             ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT, Gravity.CENTER);
@@ -54,6 +79,7 @@ public class RNCWebChromeClient extends WebChromeClient implements LifecycleEven
 
     protected View mVideoView;
     protected WebChromeClient.CustomViewCallback mCustomViewCallback;
+    protected boolean blockJsDuringLoading = true;
 
     /*
      * - Permissions -
@@ -144,30 +170,33 @@ public class RNCWebChromeClient extends WebChromeClient implements LifecycleEven
 
     @Override
     public void onPermissionRequest(final PermissionRequest request) {
-
         grantedPermissions = new ArrayList<>();
 
+        ArrayList<String> requestPermissionIdentifiers = new ArrayList<>();
         ArrayList<String> requestedAndroidPermissions = new ArrayList<>();
         for (String requestedResource : request.getResources()) {
             String androidPermission = null;
 
             if (requestedResource.equals(PermissionRequest.RESOURCE_AUDIO_CAPTURE)) {
                 androidPermission = Manifest.permission.RECORD_AUDIO;
+                requestPermissionIdentifiers.add("microphone");
             } else if (requestedResource.equals(PermissionRequest.RESOURCE_VIDEO_CAPTURE)) {
                 androidPermission = Manifest.permission.CAMERA;
-            } else if(requestedResource.equals(PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID)) {
+                requestPermissionIdentifiers.add("camera");
+            } else if (requestedResource.equals(PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID)) {
                 if (mAllowsProtectedMedia) {
-                  grantedPermissions.add(requestedResource);
+                    grantedPermissions.add(requestedResource);
                 } else {
-                  /**
-                   * Legacy handling (Kept in case it was working under some conditions (given Android version or something))
-                   *
-                   * Try to ask user to grant permission using Activity.requestPermissions
-                   *
-                   * Find more details here: https://github.com/react-native-webview/react-native-webview/pull/2732
-                   */
-                  androidPermission = PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID;
-                }            }
+                    /**
+                     * Legacy handling (Kept in case it was working under some conditions (given Android version or something))
+                     *
+                     * Try to ask user to grant permission using Activity.requestPermissions
+                     *
+                     * Find more details here: https://github.com/react-native-webview/react-native-webview/pull/2732
+                     */
+                    androidPermission = PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID;
+                }
+            }
             // TODO: RESOURCE_MIDI_SYSEX, RESOURCE_PROTECTED_MEDIA_ID.
             if (androidPermission != null) {
                 if (ContextCompat.checkSelfPermission(this.mWebView.getThemedReactContext(), androidPermission) == PackageManager.PERMISSION_GRANTED) {
@@ -178,40 +207,125 @@ public class RNCWebChromeClient extends WebChromeClient implements LifecycleEven
             }
         }
 
-        // If all the permissions are already granted, send the response to the WebView synchronously
-        if (requestedAndroidPermissions.isEmpty()) {
-            request.grant(grantedPermissions.toArray(new String[0]));
-            grantedPermissions = null;
-            return;
+            // If all the permissions are already granted, send the response to the WebView synchronously
+        if (!requestedAndroidPermissions.isEmpty()) {
+            // Show the dialog and request the permissions
+            this.showPermissionPrompt(
+                "The app needs access to your " + TextUtils.join(" and ", requestPermissionIdentifiers) + ". Allow?",
+                "Allow",
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        permissionRequest = request;
+                        requestPermissions(requestedAndroidPermissions);
+                    }
+                },
+                "Don't allow",
+                (DialogInterface.OnClickListener) (dialog, which) -> {
+                    request.deny();
+                }
+            );
+        } else if (!grantedPermissions.isEmpty()) {
+            this.showPermissionPrompt(
+                "The app needs access to your " + TextUtils.join(" and ", requestPermissionIdentifiers) + ". Allow?",
+                "Allow",
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        request.grant(grantedPermissions.toArray(new String[0]));
+                    }
+                },
+                "Don't allow",
+                (DialogInterface.OnClickListener) (dialog, which) -> {
+                    request.deny();
+                }
+            );
         }
+    }
 
-        // Otherwise, ask to Android System for native permissions asynchronously
-
-        this.permissionRequest = request;
+    private void runDelayed(Runnable function, long delayMillis) {
+        Handler handler = new Handler();
+        handler.postDelayed(function, delayMillis);
+    }
 
-        requestPermissions(requestedAndroidPermissions);
+    private void showPermissionPrompt(
+        @Nullable CharSequence message,
+        @Nullable CharSequence confirmText,
+        final DialogInterface.OnClickListener onConfirm,
+        @Nullable CharSequence cancelText,
+        final DialogInterface.OnClickListener onCancel
+    ) {
+        ThemedReactContext mReactContext = this.mWebView.getThemedReactContext();
+        AlertDialog.Builder builder = new AlertDialog.Builder(mReactContext);
+
+        if (message == null) message = "";
+        builder.setMessage(message);
+        builder.setCancelable(false);
+        if (confirmText == null) confirmText = "Allow";
+        builder.setPositiveButton(confirmText, onConfirm);
+        if (cancelText == null) cancelText = "Don't allow";
+        builder.setNegativeButton(cancelText, onCancel);
+
+        AlertDialog alertDialog = builder.create();
+        alertDialog.show();
+        // Delay making `allow` clickable for 500ms
+        Button posButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
+        posButton.setEnabled(false);
+        this.runDelayed(() -> posButton.setEnabled(true), 500);
     }
 
 
     @Override
     public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
-
         if (ContextCompat.checkSelfPermission(this.mWebView.getThemedReactContext(), Manifest.permission.ACCESS_FINE_LOCATION)
                 != PackageManager.PERMISSION_GRANTED) {
-
-            /*
-             * Keep the trace of callback and origin for the async permission request
-             */
+          /*
+            * Keep the trace of callback and origin for the async permission request
+            */
             geolocationPermissionCallback = callback;
             geolocationPermissionOrigin = origin;
 
             requestPermissions(Collections.singletonList(Manifest.permission.ACCESS_FINE_LOCATION));
-
         } else {
-            callback.invoke(origin, true, false);
+            this.showPermissionPrompt(
+                "Allow this app to use your location?",
+                "Allow",
+                (dialog, which) -> {
+                    callback.invoke(origin, true, false);
+                },
+                "Don't allow",
+                (dialog, which) -> {
+                    callback.invoke(origin, false, false);
+                }
+            );
         }
     }
 
+    @Override
+    public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
+        if (blockJsDuringLoading || mWebView.disableJsPromptLike) {
+            result.cancel();
+            return true;
+        } else
+            return super.onJsAlert(view, url, message, result);
+    }
+
+    @Override
+    public boolean onJsConfirm(WebView view, String url, String message, JsResult result) {
+        if (blockJsDuringLoading || mWebView.disableJsPromptLike) {
+            result.cancel();
+            return true;
+        } else
+            return super.onJsConfirm(view, url, message, result);
+    }
+
+    @Override
+    public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
+        if (blockJsDuringLoading || mWebView.disableJsPromptLike) {
+            result.cancel();
+            return true;
+        } else
+            return super.onJsPrompt(view, url, message, defaultValue, result);
+    }
+
     private PermissionAwareActivity getPermissionAwareActivity() {
         Activity activity = this.mWebView.getThemedReactContext().getCurrentActivity();
         if (activity == null) {
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java
index d59e19c..ebbeaa2 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java
@@ -1,7 +1,9 @@
 package com.reactnativecommunity.webview;
 
 import android.annotation.TargetApi;
+import android.content.Intent;
 import android.graphics.Bitmap;
+import android.net.Uri;
 import android.net.http.SslError;
 import android.os.Build;
 import android.os.SystemClock;
@@ -32,6 +34,8 @@ import com.reactnativecommunity.webview.events.TopLoadingStartEvent;
 import com.reactnativecommunity.webview.events.TopRenderProcessGoneEvent;
 import com.reactnativecommunity.webview.events.TopShouldStartLoadWithRequestEvent;
 
+import java.util.Arrays;
+import java.util.Objects;
 import java.util.concurrent.atomic.AtomicReference;
 
 public class RNCWebViewClient extends WebViewClient {
@@ -41,6 +45,8 @@ public class RNCWebViewClient extends WebViewClient {
     protected boolean mLastLoadFailed = false;
     protected RNCWebView.ProgressChangedFilter progressChangedFilter = null;
     protected @Nullable String ignoreErrFailedForThisURL = null;
+    // Allow list is used to support specific deeplinks in the webview.
+    private final String[] DEEPLINK_ALLOW_LIST = new String[] {"https://twitter.com/i/wallet/verify"};
     protected @Nullable RNCBasicAuthCredential basicAuthCredential = null;
 
     public void setIgnoreErrFailedForThisURL(@Nullable String url) {
@@ -51,12 +57,28 @@ public class RNCWebViewClient extends WebViewClient {
         basicAuthCredential = credential;
     }
 
+    private Boolean SetBlockJsDuringLoading(Boolean val, RNCWebView reactWebView) {
+        RNCWebChromeClient chromeClient = (RNCWebChromeClient) reactWebView.mWebChromeClient;
+
+        if(Objects.nonNull(chromeClient)) {
+            chromeClient.blockJsDuringLoading = val;
+
+            return true;
+        }
+
+        return false;
+    }
+
     @Override
     public void onPageFinished(WebView webView, String url) {
         super.onPageFinished(webView, url);
+        // Only return the URL that the web view is currently showing.
+        String visibleUrl = webView.getUrl();
+        Boolean isFinishedLoading = url.equals(visibleUrl);
 
-        if (!mLastLoadFailed) {
+        if (!mLastLoadFailed && isFinishedLoading) {
             RNCWebView reactWebView = (RNCWebView) webView;
+            this.SetBlockJsDuringLoading(false, reactWebView);
 
             reactWebView.callInjectedJavaScript();
 
@@ -121,7 +143,18 @@ public class RNCWebViewClient extends WebViewClient {
             RNCWebViewModuleImpl.shouldOverrideUrlLoadingLock.removeLock(lockIdentifier);
 
             return shouldOverride;
-        } else {
+        } else if (url != null && Arrays.asList(DEEPLINK_ALLOW_LIST).contains(url)) {
+            // This case is used to support deeplinking within the webview. We are limiting this but
+            // if more links are to be supported we should consider a more scaleable solution. That is
+            // secure and scaleable.
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.setData(Uri.parse(url));
+            if(intent.resolveActivity(view.getContext().getPackageManager()) != null) {
+                view.getContext().startActivity(intent);
+                return true;
+            } else
+                return false;
+       } else {
             FLog.w(TAG, "Couldn't use blocking synchronous call for onShouldStartLoadWithRequest due to debugging or missing Catalyst instance, falling back to old event-and-load.");
             progressChangedFilter.setWaitingForCommandLoadUrl(true);
 
@@ -136,6 +169,21 @@ public class RNCWebViewClient extends WebViewClient {
     @TargetApi(Build.VERSION_CODES.N)
     @Override
     public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
+        this.SetBlockJsDuringLoading(true, (RNCWebView) view);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            /*
+            * In order to follow redirects properly, we return null in interceptRequest().
+            * Doing this breaks the web3 injection on the resulting page, so we have to reload to
+            * make sure web3 is available.
+            * */
+
+            if (request.isForMainFrame() && request.isRedirect()) {
+                view.loadUrl(request.getUrl().toString());
+                return true;
+            }
+        }
+
         final String url = request.getUrl().toString();
         return this.shouldOverrideUrlLoading(view, url);
     }
@@ -205,7 +253,7 @@ public class RNCWebViewClient extends WebViewClient {
                 code,
                 description,
                 failingUrl
-        );
+            );
     }
 
     @Override
diff --git a/node_modules/react-native-webview/apple/RNCWebView.mm b/node_modules/react-native-webview/apple/RNCWebView.mm
index 1ae84c8..229c4b0 100644
--- a/node_modules/react-native-webview/apple/RNCWebView.mm
+++ b/node_modules/react-native-webview/apple/RNCWebView.mm
@@ -275,6 +275,7 @@ - (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &
     REMAP_WEBVIEW_PROP(allowUniversalAccessFromFileURLs)
     REMAP_WEBVIEW_PROP(allowsInlineMediaPlayback)
     REMAP_WEBVIEW_PROP(webviewDebuggingEnabled)
+    REMAP_WEBVIEW_PROP(disableJsPromptLike)
     REMAP_WEBVIEW_PROP(allowsAirPlayForMediaPlayback)
     REMAP_WEBVIEW_PROP(mediaPlaybackRequiresUserAction)
     REMAP_WEBVIEW_PROP(automaticallyAdjustContentInsets)
diff --git a/node_modules/react-native-webview/apple/RNCWebViewImpl.m b/node_modules/react-native-webview/apple/RNCWebViewImpl.m
index 77abeaf..e5363e8 100644
--- a/node_modules/react-native-webview/apple/RNCWebViewImpl.m
+++ b/node_modules/react-native-webview/apple/RNCWebViewImpl.m
@@ -145,6 +145,8 @@ @implementation RNCWebViewImpl
   UIStatusBarStyle _savedStatusBarStyle;
 #endif // !TARGET_OS_OSX
   BOOL _savedStatusBarHidden;
+  BOOL _disablePromptDuringLoading;
+  BOOL _disableJsPromptLike;
 
 #if defined(__IPHONE_OS_VERSION_MAX_ALLOWED) && __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000 /* __IPHONE_11_0 */
   UIScrollViewContentInsetAdjustmentBehavior _savedContentInsetAdjustmentBehavior;
@@ -179,6 +181,8 @@ - (instancetype)initWithFrame:(CGRect)frame
     _injectedJavaScriptForMainFrameOnly = YES;
     _injectedJavaScriptBeforeContentLoaded = nil;
     _injectedJavaScriptBeforeContentLoadedForMainFrameOnly = YES;
+    _disablePromptDuringLoading = YES;
+    _disableJsPromptLike = NO;
 
 #if defined(__IPHONE_OS_VERSION_MAX_ALLOWED) && __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000 /* __IPHONE_11_0 */
     _savedContentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
@@ -588,6 +592,9 @@ - (void)setWebviewDebuggingEnabled:(BOOL)webviewDebuggingEnabled {
       _webView.inspectable = _webviewDebuggingEnabled;
 }
 #endif
+- (void)setDisableJsPromptLike:(BOOL)disableJsPromptLike {
+  _disableJsPromptLike = disableJsPromptLike;
+}
 
 #ifdef RCT_NEW_ARCH_ENABLED
 - (void)destroyWebView
@@ -685,6 +692,7 @@ -(void)keyboardDisplacementFix
 - (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey,id> *)change context:(void *)context{
   if ([keyPath isEqual:@"estimatedProgress"] && object == self.webView) {
     if(_onLoadingProgress){
+      _disablePromptDuringLoading = YES;
       NSMutableDictionary<NSString *, id> *event = [self baseEvent];
       [event addEntriesFromDictionary:@{@"progress":[NSNumber numberWithDouble:self.webView.estimatedProgress]}];
       _onLoadingProgress(event);
@@ -762,6 +770,7 @@ - (void)userContentController:(WKUserContentController *)userContentController
       NSMutableDictionary<NSString *, id> *event = [self baseEvent];
       [event addEntriesFromDictionary: @{@"navigationType": message.body}];
       _onLoadingFinish(event);
+      _disablePromptDuringLoading = NO;
     }
   } else if ([message.name isEqualToString:MessageHandlerName]) {
     if (_onMessage) {
@@ -1156,17 +1165,45 @@ - (void)                    webView:(WKWebView *)webView
 
 #pragma mark - WKNavigationDelegate methods
 
+/**
+ * one method to construct dialog title information based on the frame,
+ * if get host, show it as title, otherwise show a default title
+ */
+- (NSString *)constructDialogTitle:(WKFrameInfo *)frame
+{
+    // get url from frame
+    NSURL *urlObject = frame.request.URL;
+    BOOL invalidBaseURL = !urlObject.scheme || !urlObject.host;
+    NSString *baseURL = invalidBaseURL ? @"" : [NSString stringWithFormat:@"%@://%@%@",
+      urlObject.scheme,
+      urlObject.host,
+      urlObject.port ? [NSString stringWithFormat:@":%@", urlObject.port] : @""
+    ];
+
+    return baseURL.length ? [NSString stringWithFormat:@"Message from \n'%@'", baseURL] : @"Message from 3rd party";
+}
+
 /**
  * alert
  */
 - (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler
 {
-#if !TARGET_OS_OSX
-  UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert];
-  [alert addAction:[UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
+  if(_disablePromptDuringLoading || _disableJsPromptLike) {
     completionHandler();
-  }]];
-  [[self topViewController] presentViewController:alert animated:YES completion:NULL];
+    return ;
+  }
+#if !TARGET_OS_OSX
+  NSString* dialogTitle = [self constructDialogTitle:frame];
+  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.7 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
+    UIAlertController *alert = [UIAlertController alertControllerWithTitle:dialogTitle message:message preferredStyle:UIAlertControllerStyleAlert];
+    [alert addAction:[UIAlertAction actionWithTitle:@"Ok"
+                                    style:UIAlertActionStyleDefault
+                                    handler:^(UIAlertAction *action) {
+                                        completionHandler();
+                                    }
+                     ]];
+    [[self topViewController] presentViewController:alert animated:YES completion:NULL];
+  });
 #else
   NSAlert *alert = [[NSAlert alloc] init];
   [alert setMessageText:message];
@@ -1180,12 +1217,18 @@ - (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSStrin
  * confirm
  */
 - (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL))completionHandler{
+  if(_disablePromptDuringLoading || _disableJsPromptLike) {
+    completionHandler(nil);
+    return ;
+  }
+
 #if !TARGET_OS_OSX
-  UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert];
-  [alert addAction:[UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
+  NSString* dialogTitle = [self constructDialogTitle:frame];
+  UIAlertController *alert = [UIAlertController alertControllerWithTitle:dialogTitle message:message preferredStyle:UIAlertControllerStyleAlert];
+  [alert addAction:[UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDestructive handler:^(UIAlertAction *action) {
     completionHandler(YES);
   }]];
-  [alert addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
+  [alert addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
     completionHandler(NO);
   }]];
   [[self topViewController] presentViewController:alert animated:YES completion:NULL];
@@ -1205,16 +1248,23 @@ - (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSStr
  * prompt
  */
 - (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString *))completionHandler{
+  if(_disablePromptDuringLoading || _disableJsPromptLike) {
+    completionHandler(nil);
+    return ;
+  }
+
 #if !TARGET_OS_OSX
-  UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:prompt preferredStyle:UIAlertControllerStyleAlert];
+  NSString *dialogTitle = [self constructDialogTitle:frame];
+  UIAlertController *alert = [UIAlertController alertControllerWithTitle:dialogTitle message:prompt preferredStyle:UIAlertControllerStyleAlert];
   [alert addTextFieldWithConfigurationHandler:^(UITextField *textField) {
     textField.text = defaultText;
   }];
-  UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
-    completionHandler([[alert.textFields lastObject] text]);
+  UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDestructive handler:^(UIAlertAction *action) {
+      NSString *result = [[alert.textFields lastObject] text];
+      completionHandler(result);
   }];
   [alert addAction:okAction];
-  UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
+  UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
     completionHandler(nil);
   }];
   [alert addAction:cancelAction];
@@ -1253,21 +1303,21 @@ - (void)                         webView:(WKWebView *)webView
   requestMediaCapturePermissionForOrigin:(WKSecurityOrigin *)origin
                         initiatedByFrame:(WKFrameInfo *)frame
                                     type:(WKMediaCaptureType)type
-                         decisionHandler:(void (^)(WKPermissionDecision decision))decisionHandler {
-  if (_mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_GrantIfSameHost_ElsePrompt || _mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_GrantIfSameHost_ElseDeny) {
-    if ([origin.host isEqualToString:webView.URL.host]) {
-      decisionHandler(WKPermissionDecisionGrant);
-    } else {
-      WKPermissionDecision decision = _mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_GrantIfSameHost_ElsePrompt ? WKPermissionDecisionPrompt : WKPermissionDecisionDeny;
-      decisionHandler(decision);
-    }
-  } else if (_mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_Deny) {
-    decisionHandler(WKPermissionDecisionDeny);
-  } else if (_mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_Grant) {
-    decisionHandler(WKPermissionDecisionGrant);
-  } else {
-    decisionHandler(WKPermissionDecisionPrompt);
-  }
+                         decisionHandler:(void (^)(WKPermissionDecision decision))decisionHandler API_AVAILABLE(ios(15.0)) {
+   if (_mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_GrantIfSameHost_ElsePrompt || _mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_GrantIfSameHost_ElseDeny) {
+     if ([origin.host isEqualToString:webView.URL.host]) {
+       decisionHandler(WKPermissionDecisionGrant);
+     } else {
+       WKPermissionDecision decision = _mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_GrantIfSameHost_ElsePrompt ? WKPermissionDecisionPrompt : WKPermissionDecisionDeny;
+       decisionHandler(decision);
+     }
+   } else if (_mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_Deny) {
+     decisionHandler(WKPermissionDecisionDeny);
+   } else if (_mediaCapturePermissionGrantType == RNCWebViewPermissionGrantType_Grant) {
+     decisionHandler(WKPermissionDecisionGrant);
+   } else {
+     decisionHandler(WKPermissionDecisionPrompt);
+   }
 }
 #endif
 
@@ -1535,6 +1585,7 @@ - (void)webView:(WKWebView *)webView
   }
 
   if (_onLoadingFinish) {
+    _disablePromptDuringLoading = NO;
     _onLoadingFinish([self baseEvent]);
   }
 }
diff --git a/node_modules/react-native-webview/lib/WebViewTypes.d.ts b/node_modules/react-native-webview/lib/WebViewTypes.d.ts
index 7cbd835..882321f 100644
--- a/node_modules/react-native-webview/lib/WebViewTypes.d.ts
+++ b/node_modules/react-native-webview/lib/WebViewTypes.d.ts
@@ -1066,5 +1066,9 @@ export interface WebViewSharedProps extends ViewProps {
      * Enables WebView remote debugging using Chrome (Android) or Safari (iOS).
      */
     webviewDebuggingEnabled?: boolean;
+    /**
+     * Disallow calling `window.alert`, `window.confirm`, `window.prompt` from webview. The default value is `false`.
+     */
+    disableJsPromptLike?: boolean;
 }
 export {};
